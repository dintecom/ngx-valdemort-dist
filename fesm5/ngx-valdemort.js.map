{"version":3,"file":"ngx-valdemort.js","sources":["ng://ngx-valdemort/lib/default-validation-errors.service.ts","ng://ngx-valdemort/lib/validation-error.directive.ts","ng://ngx-valdemort/lib/default-validation-errors.directive.ts","ng://ngx-valdemort/lib/valdemort-config.service.ts","ng://ngx-valdemort/lib/validation-errors.component.ts","ng://ngx-valdemort/lib/valdemort.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ValidationErrorDirective } from './validation-error.directive';\n\n/**\n * Service used by the default validation errors directive to store the default error template references. This\n * service is injected in the validation errors component which displays the appropriate templates and provides their context.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DefaultValidationErrors {\n  directives: Array<ValidationErrorDirective> = [];\n}\n","/* tslint:disable:directive-selector */\n/* tslint:disable:no-input-rename */\nimport { Directive, Input, TemplateRef } from '@angular/core';\n\n/**\n * Directive allowing to define the template for an error of a given type (using the `valError` input), using an ng-template.\n * It's used inside the body of the validation errors component, or inside the body of the default validation errors directive.\n * See the documentation of these two for example usages.\n */\n@Directive({selector: 'ng-template[valError]'})\nexport class ValidationErrorDirective {\n  /**\n   * The type of the error that the content of the template must display.\n   */\n  @Input('valError') type: string;\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/* tslint:disable:use-host-property-decorator */\n/* tslint:disable:directive-selector */\nimport { AfterContentInit, ContentChildren, Directive, QueryList } from '@angular/core';\nimport { DefaultValidationErrors } from './default-validation-errors.service';\nimport { ValidationErrorDirective } from './validation-error.directive';\n\n/**\n * Directive allowing to register default templates for validation error messages. It's supposed to be used once,\n * typically in the root component. By using templates to do that, error messages can\n * - easily be i18ned\n * - easily use pipes\n * - easily use HTML\n * - easily be ordered\n *\n * Example usage:\n * ```\n *   <val-default-errors>\n *     <ng-template valError=\"required\">This field is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\">This field must be at most {{ error.max | number }}</ng-template>\n *   </val-default-errors>\n * ```\n *\n * Example usage where a label is used to make the messages less generic:\n * ```\n *   <val-default-errors>\n *     <ng-template valError=\"required\" let-label>{{ label }} is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\" let-label>{{ label }} must be at most {{ error.max | number }}</ng-template>\n *   </val-default-errors>\n * ```\n *\n * This directive stores the default template references in a service, that is then injected in the validation errors components\n * to be reused.\n */\n@Directive({\n  selector: 'val-default-errors',\n  host: {\n    style: 'display: none'\n  }\n})\nexport class DefaultValidationErrorsDirective implements AfterContentInit {\n\n  constructor(private defaultValidationErrors: DefaultValidationErrors) { }\n\n  /**\n   * The list of validation error directives (i.e. <ng-template valError=\"...\">)\n   * contained inside the component element.\n   */\n  @ContentChildren(ValidationErrorDirective)\n  errorDirectives: QueryList<ValidationErrorDirective>;\n\n  ngAfterContentInit() {\n    this.defaultValidationErrors.directives = this.errorDirectives.toArray();\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, ControlContainer, FormGroupDirective, NgForm } from '@angular/forms';\n\n/**\n * The display mode of the validation errors. For a given control, either all the validation errors\n * are displayed, or only the first one.\n */\nexport enum DisplayMode {\n  ALL, ONE\n}\n\n/**\n * The configuration service used by the validation errors component to apply common rules for all\n * form controls.\n *\n * To change its default behavior, you can either inject this service in your root module or component and mutate it,\n * or define your own implementation and provide it.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValdemortConfig {\n\n  /**\n   * The display mode of the errors. The default value is ALL, meaning that all the errors existing on a control\n   * (and which have an error template defined) are displayed.\n   */\n  displayMode = DisplayMode.ALL;\n\n  /**\n   * Specifies one or several CSS classes (separated by a white space) that are automatically added to the\n   * validation errors element. This can be useful to reuse a standard CSS class of your CSS framework (like\n   * .invalid-feedback in BootStrap), rather than styling the val-errors element itself.\n   *\n   * The default value is null (no class is added).\n   */\n  errorsClasses: string | null = null;\n\n  /**\n   * Specifies one or several CSS classes (separated by a white space) that are automatically added to the\n   * each validation error message element. This can be useful to reuse a standard CSS class of your CSS framework\n   * rather than styling the div element itself.\n   *\n   * The default value is null (no class is added).\n   */\n  errorClasses: string | null = null;\n\n  /**\n   * Specifies when error messages should be displayed. based on the state of the control itself (touched, dirty, etc.)\n   * and on the state of the form directive containing it (if any). This function is only called if the control is invalid\n   * in the first place: if it's valid, errors are never displayed.\n   *\n   * The default value of this function returns true if the control is touched, or if the form (if any) is submitted.\n   */\n  shouldDisplayErrors = (control: AbstractControl, form: NgForm | FormGroupDirective | undefined) =>\n    control.touched || (!!form && form.submitted)\n}\n","/* tslint:disable:use-host-property-decorator */\nimport { Component, ContentChildren, Input, Optional, QueryList } from '@angular/core';\nimport { AbstractControl, ControlContainer, FormArray, FormGroup, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ValdemortConfig, DisplayMode } from './valdemort-config.service';\nimport { DefaultValidationErrors } from './default-validation-errors.service';\nimport { ValidationErrorDirective } from './validation-error.directive';\n\n/**\n * Component allowing to display validation error messages associated to a given form control, form group or form array.\n * The control is provided using the `control` input of the component. If it's used inside an enclosing form group or\n * form array, it can instead be provided using the `controlName` input of the component.\n *\n * Example usage where the control itself is being passed as input:\n * ```\n *   <val-errors [control]=\"form.get('birthDate')\">\n *     <ng-template valError=\"required\">The birth date is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\">The max value for the birth date is {{ error.max | number }}</ng-template>\n *   </val-errors>\n * ```\n *\n * Example usage where the control name is being passed as input:\n * ```\n *   <val-errors controlName=\"birthDate\">\n *     <ng-template valError=\"required\">The birth date is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\">The max value for the birth date is {{ error.max | number }}</ng-template>\n *   </val-errors>\n * ```\n *\n * This component, if the control is invalid, displays its validation errors using the provided templates.\n * The templates, as shown in the above example, have access to the validation error itself.\n *\n * The label of the control can also be provided as input, and then used in the templates:\n * ```\n *   <val-errors controlName=\"birthDate\" label=\"the birth date\">\n *     <ng-template valError=\"required\" let-label>{{ label }} is mandatory</ng-template>\n *     <ng-template valError=\"max\" let-error=\"error\" let-label>The max value for {{ label }} is {{ error.max | number }}</ng-template>\n *   </val-errors>\n * ```\n *\n * The componentâs behavior is configured globally by the Config service (see its documentation for more details). It can\n * - display the first error, or all the errors\n * - add CSS classes to its host `<val-errors>` element\n * - add CSS classes to each error message element being displayed\n * - choose when to display the errors (dirty, touched, touched and submitted, etc.)\n *\n * Global, default templates can be defined (and used by this component) using the default validation errors directive\n * (see its documentation for details). So, if the default error messages are defined and sufficient for a given control, all you\n * need is\n *\n * ```\n * <val-errors controlName=\"birthDate\"></val-errors>\n * ```\n *\n * or, if the default templates expect a label:\n *\n * ```\n * <val-errors controlName=\"birthDate\" label=\"the birth date\"></val-errors>\n * ```\n *\n * If, however, you want to override one or several error messages by custom ones, you can do so by simply defining them inside the\n * component:\n *\n * ```\n * <val-errors controlName=\"birthDate\" label=\"the birth date\">\n *   <ng-template valError=\"max\">You're too young, sorry</ng-template>\n * </val-errors>\n * ```\n *\n * If an error is present on the control, but doesn't have any template or default template defined for its type, then it's not\n * displayed. If the control is valid, or if none of the errors of the component has a matching template or default template,\n * then this component itself is hidden.\n */\n@Component({\n  selector: 'val-errors',\n  templateUrl: './validation-errors.component.html',\n  host: {\n    '[class]': 'errorsClasses',\n    '[style.display]': `shouldDisplayErrors ? '' : 'none'`\n  }\n})\nexport class ValidationErrorsComponent {\n\n  /**\n   * The FormControl, FormGroup or FormArray containing the validation errors.\n   * If set, the controlName input is ignored\n   */\n  @Input()\n  control: AbstractControl;\n\n  /**\n   * The name (or the index, in case it's contained in a FormArray) of the FormControl, FormGroup or FormArray containing the validation\n   * errors.\n   * Ignored if the control input is set, and only usable if the control to validate is part of a control container\n   */\n  @Input()\n  controlName: string | number;\n\n  /**\n   * The label of the field, exposed to templates so they can use it in the error message.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * The list of validation error directives (i.e. <ng-template valError=\"...\">) contained inside the component element.\n   */\n  @ContentChildren(ValidationErrorDirective)\n  errorDirectives!: QueryList<ValidationErrorDirective>;\n\n  /**\n   * @param config the Config service instance, defining the behavior of this component\n   * @param defaultValidationErrors the service holding the default error templates, optionally\n   * defined by using the default validation errors directive\n   * @param controlContainer one of the 4 form group or form array directives that can \"wrap\" the control.\n   * It's injected so that we can know if it exists and, if it does, if its form directive has been submitted or not:\n   * the config service shouldDisplayErrors function can choose (and does by default) to use that information.\n   */\n  constructor(private config: ValdemortConfig,\n              private defaultValidationErrors: DefaultValidationErrors,\n              @Optional() private controlContainer: ControlContainer) { }\n\n  get shouldDisplayErrors() {\n    const ctrl = this.actualControl;\n    if (!ctrl || !ctrl.invalid || !this.hasDisplayableError(ctrl)) {\n      return false;\n    }\n    const form = this.controlContainer && (this.controlContainer.formDirective as NgForm | FormGroupDirective);\n    return this.config.shouldDisplayErrors(ctrl, form);\n  }\n\n  get errorsClasses(): string {\n    return this.config.errorsClasses || '';\n  }\n\n  get errorClasses(): string {\n    return this.config.errorClasses || '';\n  }\n\n  get errorDirectivesToDisplay() {\n    const mergedDirectives: Array<ValidationErrorDirective> = [];\n    const alreadyMetTypes = new Set<string>();\n    const shouldContinue = () => (this.config.displayMode === DisplayMode.ALL || mergedDirectives.length === 0);\n    const ctrl = this.actualControl;\n    for (let i = 0; i < this.defaultValidationErrors.directives.length && shouldContinue(); i++) {\n      const defaultDirective = this.defaultValidationErrors.directives[i];\n      alreadyMetTypes.add(defaultDirective.type);\n      if (ctrl.hasError(defaultDirective.type)) {\n        const customDirectiveOfSameType = this.errorDirectives.find(dir => dir.type === defaultDirective.type);\n        mergedDirectives.push(customDirectiveOfSameType || defaultDirective);\n      }\n    }\n\n    const customDirectives = this.errorDirectives.toArray();\n    for (let i = 0; i < customDirectives.length && shouldContinue(); i++) {\n      const customDirective = customDirectives[i];\n      if (ctrl.hasError(customDirective.type) && !alreadyMetTypes.has(customDirective.type)) {\n        mergedDirectives.push(customDirective);\n      }\n    }\n    return mergedDirectives;\n  }\n\n  get actualControl(): AbstractControl {\n    return this.control ||\n      ((this.controlName || (this.controlName as any === 0)) &&\n        this.controlContainer &&\n        this.controlContainer.control &&\n        ((this.controlContainer.control as FormGroup | FormArray).controls as any)[this.controlName]);\n  }\n\n  private hasDisplayableError(ctrl: AbstractControl) {\n    return ctrl.errors && Object.keys(ctrl.errors).some(type =>\n      this.defaultValidationErrors.directives.some(dir => dir.type === type)\n      || this.errorDirectives.some(dir => dir.type === type)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ValidationErrorsComponent } from './validation-errors.component';\nimport { CommonModule } from '@angular/common';\nimport { DefaultValidationErrorsDirective } from './default-validation-errors.directive';\nimport { ValidationErrorDirective } from './validation-error.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ValidationErrorsComponent,\n    ValidationErrorDirective,\n    DefaultValidationErrorsDirective\n  ],\n  exports: [\n    ValidationErrorsComponent,\n    ValidationErrorDirective,\n    DefaultValidationErrorsDirective\n  ]\n})\nexport class ValdemortModule { }\n"],"names":[],"mappings":"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"}